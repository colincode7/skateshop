generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          USER_ROLE @default(USER)
    active        Boolean   @default(true)
    seller        Boolean   @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    stores        Store[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum USER_ROLE {
    USER
    ADMIN
}

model Store {
    id          String    @id @default(cuid())
    name        String
    description String?   @db.Text
    image       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    products    Product[]
}

model Product {
    id          String           @id @default(cuid())
    name        String
    description String?          @db.Text
    price       Int
    images      Json?
    category    PRODUCT_CATEGORY @default(SKATEBOARD)
    quantity    Int              @default(1)
    inventory   Int              @default(1)
    rating      Int              @default(0)
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    store       Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId     String
}

enum PRODUCT_CATEGORY {
    SKATEBOARD
    CLOTHING
    SHOES
    ACCESSORIES
}
